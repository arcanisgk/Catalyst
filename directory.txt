Project-Root
│   .env                      # Environment configuration for dynamic runtime values (though not preferred)
│   composer.json             # PHP dependency management and project metadata
│   tree.txt                  # Project structure documentation
│
├───app                       # Main application directory - houses both framework and custom code
│   │   Kernel.php            # Application kernel - orchestrates bootstrap process and request lifecycle
│   │
│   ├───Assets                # Core assets - both framework components and resources (needs restructuring)
│   │   ├───Framework         # Reserved for internal framework use - not for modification by third parties
│   │   │   ├───Controllers   # Base and framework-specific controllers - provides foundation for application controllers
│   │   │   │       AuthenticationController.php  # Handles authentication flows - login, registration, password reset
│   │   │   │       ContactController.php         # Manages contact form functionality - validating and processing submissions
│   │   │   │       Controller.php                # Base controller with shared functionality - central to MVC implementation
│   │   │   │       HomeController.php            # Handles homepage rendering - demonstrates controller implementation
│   │   │   │
│   │   │   ├───Core          # Essential framework components - follows separation of concerns
│   │   │   │   │   Argument.php                  # Command-line argument handling - supports CLI operations
│   │   │   │   │   UrlGenerator.php              # URL generation utilities - creates application URLs consistently
│   │   │   │   │
│   │   │   │   ├───Middleware                    # HTTP middleware system - handles cross-cutting concerns in request lifecycle
│   │   │   │   │       CallableMiddleware.php    # Adapter for callable functions as middleware - increases flexibility
│   │   │   │   │       CoreMiddleware.php        # Base middleware functionality - foundations for all middleware
│   │   │   │   │       DebugMiddleware.php       # Debug information collection - active only in development
│   │   │   │   │       MiddlewareInterface.php   # Interface for middleware implementation - ensures consistent implementation
│   │   │   │   │       MiddlewareStack.php       # Manages middleware execution chain - orders middleware processing
│   │   │   │   │       RequestThrottlingMiddleware.php  # Rate limiting - prevents abuse in production
│   │   │   │   │       SecurityHeadersMiddleware.php    # Adds security headers - enhances application security
│   │   │   │   │
│   │   │   │   ├───Providers                     # Service providers - bootstraps and configures services
│   │   │   │   │       TranslationServiceProvider.php  # Initializes translation system - manages i18n setup
│   │   │   │   │       ViewServiceProvider.php          # Initializes view system - prepares view rendering
│   │   │   │   │
│   │   │   │   ├───Response                      # HTTP response handling - provides structured responses
│   │   │   │   │       HtmlResponse.php          # HTML-specific response - for web pages
│   │   │   │   │       JsonResponse.php          # JSON API response - for API endpoints
│   │   │   │   │       RedirectResponse.php      # HTTP redirects - handle page redirections
│   │   │   │   │       Response.php              # Base response class - foundation for all responses
│   │   │   │   │       ViewResponse.php          # View-rendered response - combines views with data
│   │   │   │   │
│   │   │   │   ├───Route                         # Routing system - matches URLs to controllers
│   │   │   │   │       Route.php                 # Individual route definition - represents a single endpoint
│   │   │   │   │       RouteCollection.php       # Collection of routes - stores all registered routes
│   │   │   │   │       RouteCompiler.php         # Compiles route definitions - optimizes route matching
│   │   │   │   │       RouteDispatcher.php       # Matches routes and dispatches - connects URLs to controllers
│   │   │   │   │       RouteGroup.php            # Route grouping with shared attributes - organizes related routes
│   │   │   │   │       Router.php                # Main routing facade - implements singleton for global access
│   │   │   │   │
│   │   │   │   ├───Translation                   # Internationalization system - manages multiple languages
│   │   │   │   │       TranslationCache.php      # Caching for translations - improves performance
│   │   │   │   │       TranslationManager.php    # Manages translation loading - orchestrates the translation system
│   │   │   │   │       TranslationService.php    # Core translation service - implements translation lookups
│   │   │   │   │
│   │   │   │   └───View                          # View rendering system - implements template management
│   │   │   │           LayoutManager.php         # Manages layouts - handles master templates
│   │   │   │           ViewFactory.php           # Factory for views - creates view instances (singleton implementation)
│   │   │   │           ViewFinder.php            # Locates view files - resolves template paths
│   │   │   │           ViewRenderer.php          # Renders views - processes templates with data
│   │   │   │
│   │   │   ├───Exceptions                        # Framework-specific exceptions - categorizes error types
│   │   │   │       FileSystemException.php       # File system errors - handles I/O failures
│   │   │   │       MethodNotAllowedException.php # HTTP method not allowed - 405 errors
│   │   │   │       RouteNotFoundException.php    # Route not found - 404 errors
│   │   │   │
│   │   │   ├───Languages                         # Framework translation resources - supports i18n
│   │   │   │   ├───en                            # English translations - default language
│   │   │   │   └───es                            # Spanish translations - additional language support
│   │   │   │
│   │   │   ├───Models                            # Framework models - currently unused but follows MVC convention
│   │   │   ├───Traits                            # Shared trait functionality - reduces code duplication
│   │   │   │       OutputCleanerTrait.php        # Sanitizes output - prevents XSS and injection
│   │   │   │       SingletonTrait.php            # Singleton implementation - used by services requiring global state
│   │   │   │
│   │   │   └───Views                             # Framework view templates - base templates for application
│   │   │       ├───Errors                        # Error page templates - handles exception display
│   │   │       ├───Home                          # Homepage views - framework default pages
│   │   │       ├───layouts                       # Layout templates - page structure templates
│   │   │       └───partials                      # Reusable view components - shared UI elements
│   │   │
│   │   ├───Helpers                               # Helper utilities - provides cross-cutting functionality
│   │   │   ├───Debug                             # Debugging tools - assists development process
│   │   │   ├───Error                             # Error handling - implements SRP with specialized classes
│   │   │   ├───Http                              # HTTP utilities - request handling tools
│   │   │   ├───IO                                # Input/Output operations - file system interactions
│   │   │   ├───Log                               # Logging system - centralized logging (singleton implementation)
│   │   │   └───ToolBox                           # Miscellaneous tools - utility functions
│   │   │
│   │   └───resources                             # Application resources (candidate for restructuring)
│   │       ├───bin                               # Binary/executable scripts
│   │       ├───config                            # JSON configuration files - for settings that change frequently
│   │       │   ├───backup                        # Backup configuration
│   │       │   ├───development                   # Development environment configs
│   │       │   └───production                    # Production environment configs
│   │       ├───constant                          # PHP constant definitions - immutable runtime parameters
│   │       ├───loaders                           # Bootstrap loaders - initializes framework components
│   │       └───routes                            # Route definitions - maps URLs to controllers
│   │
│   ├───Entity                                    # Domain entities - business objects with behavior
│   │   ├───Default                               # Default entity implementations - framework provided
│   │   └───Project                               # Project-specific entities - custom business objects
│   │
│   └───Repository                                # Third-party development space - for application customization
│       ├───Controllers                           # Application-specific controllers - extends framework controllers
│       ├───Models                                # Application-specific models - implements business logic
│       └───Views                                 # Application-specific views - custom templates
│
├───logs                                          # Application logs - divided by type for better organization
│   ├───email                                     # Email-related logs - tracks message sending
│   ├───errors                                    # Error logs - captures exceptions and errors
│   ├───events                                    # Event logs - records application events
│   └───info                                      # General information logs - miscellaneous logging
│
├───public                                        # Publicly accessible files - web server document root
│   │   .htaccess                                 # Apache server configuration - URL rewriting rules
│   │   .user.ini                                 # PHP configuration overrides - environment-specific settings
│   │   cli.php                                   # Command-line entry point - for CLI operations
│   │   index.php                                 # Main web application entry point - handles HTTP requests
│   │   php.ini                                   # PHP configuration settings - server-specific overrides
│   │
│   ├───.well-known                               # Standard location for well-known URIs - standardized discovery
│   ├───assets                                    # Frontend assets - client-side resources
│   │   ├───audio                                 # Audio files - media resources
│   │   ├───css                                   # Stylesheets - visual styling
│   │   ├───img                                   # Images - graphical content
│   │   ├───inspinia                              # Inspinia admin theme - UI framework
│   │   ├───js                                    # JavaScript files - client-side functionality
│   │   ├───json                                  # JSON resources - client configuration
│   │   └───libs                                  # Third-party libraries - client-side dependencies
│   ├───resources                                 # Public-facing resources - accessible web content
│   └───uploads                                   # User-uploaded files - dynamic content storage
│
└───test                                          # Testing directory - contains test cases and scripts
        error_test.php                            # Error testing script - validates error handling